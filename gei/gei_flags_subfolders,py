import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
from datetime import timedelta
import pandas as pd
from pathlib import Path
import time
import os
'''

folder_path = '/home/jonathan_mn/Descargas/data/gei/raw_data/05'

folder_path = '/home/jonathan_mn/Descargas/data/gei/05'


'''

def save_data_to_txt(data_frame, file_path):

  data_frame.to_csv(file_path, sep=',', index=False) 

def gei_1min(df, columns_to_resample):

  
  df = df.set_index('timestamp')
  df_resampled = df[columns_to_resample].resample('1min').agg(['mean', 'std'])
  df_resampled.columns = [col[0] if col[1] == 'mean' else '_'.join(col) for col in df_resampled.columns]
  df_resampled = df_resampled.reset_index()

  return df_resampled

folder_path = '/home/jonathan_mn/Descargas/data/gei/raw_data/02'
folder_name = os.path.basename(folder_path)  

columns_to_read = ['DATE', 'TIME', 'species', 'MPVPosition', 'CO2_dry', 'CH4_dry', 'CO']
dataframes = []
start_time = time.time()

for file_path in Path(folder_path).rglob('*.dat'):
    
    df = pd.read_csv(file_path, delimiter=r'\s+')#, usecols=columns_to_read)
    
    dataframes.append(df)


gei = pd.concat(dataframes, ignore_index=True)
gei['timestamp'] = pd.to_datetime(gei['DATE'] + ' ' + gei['TIME'])
final_dataframe = gei.sort_values(by='timestamp').reset_index(drop=True)

end_time = time.time()
time_taken = end_time - start_time

print(f"archivos leidos en: {time_taken:.2f}s")


flag_co2 = gei[(gei['species'] == 2) | (gei['species'] == 3)][['timestamp', 'species', 'CO2_dry']].dropna()
flag_ch4 = gei[(gei['species'] == 3)][['timestamp', 'species', 'CH4_dry']].dropna()
flag_co= gei[(gei['species'] == 1) | (gei['species'] == 4)][['timestamp', 'species', 'CO']].dropna()



flag_co2_1min = gei_1min(flag_co2, ['CO2_dry'])
flag_ch4_1min = gei_1min(flag_ch4, ['CH4_dry'])
flag_co_1min = gei_1min(flag_co, ['CO'])

#UNION DE FLAGS

def merge_gei(df1, df2, df3):

  
  df1 = df1.set_index('timestamp')
  df2 = df2.set_index('timestamp')
  df3 = df3.set_index('timestamp')

  
  merged_df = pd.merge(df1, df2, on='timestamp', how='outer')
  merged_df = pd.merge(merged_df, df3, on='timestamp', how='outer')

  merged_df = merged_df.reset_index()

  return merged_df


gei_resampled = merge_gei(flag_co2_1min, flag_ch4_1min , flag_co_1min)




def plot_gei_std(merged_data):
  ''' Grafica una figura de 3x1 donde grafica cada gas con su desviacion estandar'''
  
  fecha1 = merged_data['timestamp'].min()
  fecha2= merged_data['timestamp'].max()

  fig, axes = plt.subplots(3, 1, figsize=(10, 12), sharex=True)  
  # CO2
  ax1 = axes[0]
  ax1.plot(merged_data['timestamp'], merged_data['CO2_dry'], label='CO2_dry')
  ax1_twin = ax1.twinx()  # Create a twin axis for std
  ax1_twin.plot(merged_data['timestamp'], merged_data['CO2_dry_std'], color='orange', label='CO2_dry_std')
  ax1.set_ylabel('CO2_dry')
  ax1_twin.set_ylabel('CO2_dry_std')
  ax1.legend(loc='upper left')
  ax1_twin.legend(loc='upper right')

  # CH4
  ax2 = axes[1]
  ax2.plot(merged_data['timestamp'], merged_data['CH4_dry'], label='CH4_dry')
  ax2_twin = ax2.twinx()
  ax2_twin.plot(merged_data['timestamp'], merged_data['CH4_dry_std'], color='orange', label='CH4_dry_std')
  ax2.set_ylabel('CH4_dry')
  ax2_twin.set_ylabel('CH4_dry_std')
  ax2.legend(loc='upper left')
  ax2_twin.legend(loc='upper right')

  # CO2
  ax3 = axes[2]
  ax3.plot(merged_data['timestamp'], merged_data['CO'], label='CO')
  ax3_twin = ax3.twinx()
  ax3_twin.plot(merged_data['timestamp'], merged_data['CO_std'], color='orange', label='CO_std')
  ax3.set_ylabel('CO')
  ax3_twin.set_ylabel('CO_std')
  ax3.legend(loc='upper left')
  ax3_twin.legend(loc='upper right')

  plt.suptitle(f'Concentraciones de GEI \n{fecha1} - {fecha2}')
  plt.xlabel('Timestamp')
  plt.tight_layout()
  plt.show()



plot_gei_std(gei_resampled)


save_data_to_txt(gei_resampled, f'/home/jonathan_mn/Descargas/data/gei/L0_v1/{folder_name}_raw_flags.txt')
